name: CI & Deploy (Modular)

on:
  push:
    # Exclude docs-only branch updates from triggering full CI
    branches-ignore:
      - docs

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  API_BASE_URL: ${{ secrets.API_BASE_URL }}
  NEXT_PUBLIC_API_BASE_URL: ${{ secrets.API_BASE_URL }}
  VERCEL_DEV_URL: ${{ vars.VERCEL_DEV_URL }}
  VERCEL_PROD_URL: ${{ vars.VERCEL_PROD_URL }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_BUCKET_NAME: ${{ vars.AWS_BUCKET_NAME }}

# We run linting, testing, and building in parallel
# if all jobs succeed, then we deploy
jobs:
  detect_changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      db: ${{ steps.changes.outputs.db }}
      api: ${{ steps.changes.outputs.api }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Paths filter
        id: changes
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            src:
              - 'packages/**'
              - 'index.ts'
              - 'package.json'
              - 'tsconfig.json'
              - 'turbo.jsonc'
              - 'biome.jsonc'
              - '.github/workflows/**'
              - '!docs/**'
            db:
              - 'packages/db/prisma/**'
              - 'packages/db/src/**'
              - 'packages/db/package.json'
              - 'packages/db/tsconfig.json'
            api:
              - 'packages/api/**'
              - 'packages/shared/**'
              - 'packages/db/prisma/schema.prisma'
              - 'packages/db/prisma/migrations/**'
              - 'packages/api/package.json'
              - 'packages/api/tsconfig.json'

      - name: Show decisions
        run: |
          echo "src changed? ${{ steps.changes.outputs.src }}"
          echo "db changed?  ${{ steps.changes.outputs.db }}"
          echo "api changed? ${{ steps.changes.outputs.api }}"

  build:
    name: Build
    needs: detect_changes
    if: needs.detect_changes.outputs.src == 'true'
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma client
        run: bunx prisma generate --schema packages/db/prisma/schema.prisma

      - name: Build
        run: bun run build

      - name: Derive image tag
        id: meta
        run: |
          TAG="${{ vars.IMAGE_TAG }}"
          if [ -z "$TAG" ]; then TAG=${GITHUB_SHA::12}; fi
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    needs: build
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma client
        run: bunx prisma generate --schema packages/db/prisma/schema.prisma

      - name: Lint
        run: bun run lint

  test:
    name: Test
    needs: build
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/am-crm-test
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: am-crm-test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 5s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma client
        run: bunx prisma generate --schema packages/db/prisma/schema.prisma

      - name: Apply database migrations
        run: bunx prisma migrate deploy --schema packages/db/prisma/schema.prisma

      - name: Run tests (CI without docker-compose db:up)
        run: bun run test:ci

  deploy_db:
    name: Deploy DB (migrations)
    needs: [detect_changes, build]
    if: github.ref == 'refs/heads/main' && needs.build.result == 'success' && needs.detect_changes.outputs.db == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies (for prisma migrate)
        run: bun install --frozen-lockfile

      - name: Run Prisma migrations
        run: bunx prisma migrate deploy --schema packages/db/prisma/schema.prisma

  deploy_api:
    name: Deploy API
    needs: [detect_changes, build, lint, test]
    if: github.ref == 'refs/heads/main' && needs.build.result == 'success' && needs.detect_changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (for Docker context)
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: packages/api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO }}:${{ needs.build.outputs.image_tag }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --force-new-deployment
